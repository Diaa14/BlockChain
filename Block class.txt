package blockChainBuilder;

import java.util.ArrayList;
import java.util.Date;

public class Block {
	private String blockData;
	public String blockHash;
	public String preBlockHash;
	public String merkleRoot;
	public ArrayList<Transaction> transactions = new ArrayList<Transaction>(); 
	private long timeStamp;
	private int nonce;
	
	public Block(String data, String preHash)
	{
		this.blockData = data;
		this.blockHash = calcHashingSign();
		this.preBlockHash = preHash;
		this.timeStamp = new Date().getTime();
	}
	
	public Block(String previousHash ) {
		this.preBlockHash = previousHash;
		this.timeStamp = new Date().getTime();
		
		this.blockHash = calcHashingSign(); //Making sure we do this after we set the other values.
	}
	
	public String calcHashingSign()
	{
		String calculatedHash = signature.applySha256(preBlockHash + Long.toString(timeStamp) + Integer.toString(nonce) + merkleRoot	);
		return calculatedHash;
	}
	
	public void mineBlock(int difficulty) {
		merkleRoot = signature.getMerkleRoot(transactions);
		String target = new String(new char[difficulty]).replace('\0', '0'); //Create a string with difficulty * "0" 
		while(!blockHash.substring( 0, difficulty).equals(target)) {
			nonce ++;
			blockHash = calcHashingSign();
		}
		System.out.println("Block Mined!!! : " + blockHash);
	}

	
		public boolean addTransaction(Transaction transaction) {
			//process transaction and check if valid, unless block is genesis block then ignore.
			if(transaction == null) return false;		
			if((preBlockHash != "0")) {
				if((transaction.processTransaction() != true)) {
					System.out.println("Transaction failed to process. Discarded.");
					return false;
				}
			}
			transactions.add(transaction);
			System.out.println("Transaction Successfully added to Block");
			return true;
		}
	

}
