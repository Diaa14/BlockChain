package blockChainBuilder;
import java.security.*;
import java.util.ArrayList;


public class Transaction {
	public String TID;
	public PublicKey sender;
	public PublicKey reciever;
	public float TData;
	public byte[] transSignature;
	
	public ArrayList <TransactionInput> inputs=new ArrayList<TransactionInput>();
	public ArrayList <TransactionOutput> Outputs=new ArrayList<TransactionOutput>();
	
	private static int sequence=0;
	public Transaction (PublicKey form, PublicKey to, float value, ArrayList<TransactionInput> inputs) {
		this.sender=form;
		this.reciever=to;
		this.TData=value;
		this.inputs=inputs;
		
	}
	private String calculateHash() {
		sequence++;
String calcdHash = signature.applySha256(signature.getStringFromKey(sender) + Float.toString(TData) + Integer.toString(sequence) + signature.getStringFromKey(reciever));
		return calcdHash;	
		}

	//Signs all the data we dont wish to be tampered with.
	public void generateSignature(PrivateKey privateKey) {
		String data = signature.getStringFromKey(sender) + signature.getStringFromKey(reciever) + Float.toString(TData)	;
		transSignature = signature.applyECDSASig(privateKey,data);		
	}

	public boolean verifiySignature() {
		String data = signature.getStringFromKey(sender) + signature.getStringFromKey(reciever) + Float.toString(TData)	;
		return signature.verifyECDSASig(sender, data, transSignature);
	}
	
		
	public boolean processTransaction() {
			
			if(verifiySignature() == false) {
				System.out.println("#Transaction Signature failed to verify");
				return false;
			}
					
			for(TransactionInput i : inputs) {
				i.UTXO = mainOfBlockchain.UTXOs.get(i.transactionOutputId);
			}

			if(getInputsValue() < mainOfBlockchain.minimumTransaction) {
				System.out.println("#Transaction Inputs to small: " + getInputsValue());
				return false;
			}
			
			float leftOver = getInputsValue() - TData; //get value of inputs then the left over change:
			TID = calculateHash();
			Outputs.add(new TransactionOutput( this.reciever, TData,TID)); //send value to recipient
			Outputs.add(new TransactionOutput( this.sender, leftOver,TID)); //send the left over 'change' back to sender		
					
			for(TransactionOutput o : Outputs) {
				mainOfBlockchain.UTXOs.put(o.id , o);
			}
			
			for(TransactionInput i : inputs) {
				if(i.UTXO == null) continue; //if Transaction can't be found skip it 
				mainOfBlockchain.UTXOs.remove(i.UTXO.id);
			}
			
			return true;
		}
		
		public float getInputsValue() {
			float total = 0;
			for(TransactionInput i : inputs) {
				if(i.UTXO == null) continue; //if Transaction can't be found skip it 
				total += i.UTXO.value;
			}
			return total;
		}

		public float getOutputsValue() {
			float total = 0;
			for(TransactionOutput o : Outputs) {
				total += o.value;
			}
			return total;
		}
		

}
