package blockChainBuilder;
import java.util.ArrayList;
import com.google.gson.GsonBuilder;
import java.util.Random;
import java.util.Base64;
import java.util.HashMap;
import java.security.Security;

public class mainOfBlockchain {

	public static ArrayList<Block> blockchain = new ArrayList<Block>(); 
	public static HashMap<String,TransactionOutput> UTXOs = new HashMap<String,TransactionOutput>(); 
	public static float minimumTransaction = 0.1f;
	static Random rand = new Random();
	public static int difficulty = rand.nextInt(7);
	public static Wallet A1;
	public static Wallet A2;
	public static Transaction genesisTransaction;


	public static void main(String[] args) {
		
		
		Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
		A1 = new Wallet();
		A2 = new Wallet();
		Wallet coinbase = new Wallet();

		
		//Test public and private keys
				System.out.println("Private and public keys:");
				System.out.println(signature.getStringFromKey(A1.privateKey));
				System.out.println(signature.getStringFromKey(A1.publicKey));
				//Create a test transaction from WalletA to walletB 
				Transaction transaction = new Transaction(A1.publicKey, A2.publicKey, 5, null);
				transaction.generateSignature(A1.privateKey);
				//Verify the signature works and verify it from the public key
				System.out.println("Is signature verified");
				System.out.println(transaction.verifiySignature());


	
			genesisTransaction = new Transaction(coinbase.publicKey, A1.publicKey, 100f, null);
			genesisTransaction.generateSignature(coinbase.privateKey);	 	
			genesisTransaction.TID = "0"; //manually set the transaction id
			genesisTransaction.Outputs.add(new TransactionOutput(genesisTransaction.reciever, genesisTransaction.TData, genesisTransaction.TID)); //manually add the Transactions Output
			UTXOs.put(genesisTransaction.Outputs.get(0).id, genesisTransaction.Outputs.get(0)); 
			System.out.println("Creating and Mining Genesis block... ");
			Block genesis = new Block("0");
			genesis.addTransaction(genesisTransaction);
			addBlock(genesis);
			
			//testing
			Block block1 = new Block(genesis.blockHash);
			System.out.println("\nWalletA's balance is: " + A1.getBalance());
			System.out.println("\nWalletA is Attempting to send funds (40) to WalletB...");
			block1.addTransaction(A1.sendFunds(A2.publicKey, 40f));
			addBlock(block1);
			System.out.println("\nWalletA's balance is: " + A1.getBalance());
			System.out.println("WalletB's balance is: " + A2.getBalance());
			
			Block block2 = new Block(block1.blockHash);
			System.out.println("\nWalletA Attempting to send more funds (1000) than it has...");
			block2.addTransaction(A1.sendFunds(A2.publicKey, 1000f));
			addBlock(block2);
			System.out.println("\nWalletA's balance is: " + A1.getBalance());
			System.out.println("WalletB's balance is: " + A2.getBalance());
			
			Block block3 = new Block(block2.blockHash);
			System.out.println("\nWalletB is Attempting to send funds (20) to WalletA...");
			block3.addTransaction(A2.sendFunds( A1.publicKey, 20));
			System.out.println("\nWalletA's balance is: " + A1.getBalance());
			System.out.println("WalletB's balance is: " + A2.getBalance());
			
			isChainValid();
			
		}

		
		public static Boolean isChainValid() {
			Block currentBlock; 
			Block previousBlock;
			String hashTarget = new String(new char[difficulty]).replace('\0', '0');
			HashMap<String,TransactionOutput> tempUTXOs = new HashMap<String,TransactionOutput>(); 
			tempUTXOs.put(genesisTransaction.Outputs.get(0).id, genesisTransaction.Outputs.get(0));
			
			
			for(int i=1; i < blockchain.size(); i++) {
				
				currentBlock = blockchain.get(i);
				previousBlock = blockchain.get(i-1);
				//compare registered hash and calculated hash:
				if(!currentBlock.blockHash.equals(currentBlock.calcHashingSign()) ){
					System.out.println("#Current Hashes not equal");
					return false;
				}
				//compare previous hash and registered previous hash
				if(!previousBlock.blockHash.equals(currentBlock.preBlockHash) ) {
					System.out.println("#Previous Hashes not equal");
					return false;
				}
				//check if hash is solved
				if(!currentBlock.blockHash.substring( 0, difficulty).equals(hashTarget)) {
					System.out.println("#This block hasn't been mined");
					return false;
				}
				
				
				TransactionOutput tempOutput;
				for(int t=0; t <currentBlock.transactions.size(); t++) {
					Transaction currentTransaction = currentBlock.transactions.get(t);
					
					if(!currentTransaction.verifiySignature()) {
						System.out.println("#Signature on Transaction(" + t + ") is Invalid");
						return false; 
					}
					if(currentTransaction.getInputsValue() != currentTransaction.getOutputsValue()) {
						System.out.println("#Inputs are note equal to outputs on Transaction(" + t + ")");
						return false; 
					}
					
					for(TransactionInput input: currentTransaction.inputs) {	
						tempOutput = tempUTXOs.get(input.transactionOutputId);
						
						if(tempOutput == null) {
							System.out.println("#Referenced input on Transaction(" + t + ") is Missing");
							return false;
						}
						
						if(input.UTXO.value != tempOutput.value) {
							System.out.println("#Referenced input Transaction(" + t + ") value is Invalid");
							return false;
						}
						
						tempUTXOs.remove(input.transactionOutputId);
					}
					
					for(TransactionOutput output: currentTransaction.Outputs) {
						tempUTXOs.put(output.id, output);
					}
					
					if( currentTransaction.Outputs.get(0).reciepient != currentTransaction.reciever) {
						System.out.println("#Transaction(" + t + ") output reciepient is not who it should be");
						return false;
					}
					if( currentTransaction.Outputs.get(1).reciepient != currentTransaction.sender) {
						System.out.println("#Transaction(" + t + ") output 'change' is not sender.");
						return false;
					}
					
				}
				
			}
			System.out.println("Blockchain is valid");
			return true;
		}
		
		public static void addBlock(Block newBlock) {
			newBlock.mineBlock(difficulty);
			blockchain.add(newBlock);
		}
	}
